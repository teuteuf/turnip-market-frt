{"version":3,"sources":["PseudoInput.tsx","MarketsSelection.tsx","Markets.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PseudoInput","setPseudo","useState","typingPseudo","setTypingPseudo","type","placeholder","onChange","event","target","value","onClick","MarketsSelection","addMarketId","newMarketName","setNewMarketName","existingMarketId","setExistingMarketId","console","log","Markets","pseudo","marketsIdsAsString","localStorage","getItem","split","getMarketIdsFromLocalStorage","marketIds","setMarketIds","useEffect","setItem","join","setMarketIdsToLocalStorage","newMarketId","App","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4MAsBeA,EAhBiC,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EACvBC,mBAAS,IADc,mBACxDC,EADwD,KAC1CC,EAD0C,KAI/D,OACE,6BACE,2BACEC,KAAK,OACLC,YAAY,oBACZC,SAAU,SAAAC,GAAK,OAAIJ,EAAgBI,EAAMC,OAAOC,UAElD,4BAAQC,QATuB,kBAAMV,EAAUE,KAS/C,Q,OCgBSS,EA3B2C,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EACnCX,qBADmC,mBACtEY,EADsE,KACvDC,EADuD,OAE7Bb,qBAF6B,mBAEtEc,EAFsE,KAEpDC,EAFoD,KAO7E,OAAO,6BACL,6BACE,2BACEZ,KAAK,OACLC,YAAY,kBACZC,SAAU,SAACC,GAAD,OAAWO,EAAiBP,EAAMC,OAAOC,UAErD,4BAAQC,QAVS,kBAAMO,QAAQC,IAAIL,KAUnC,sBAEF,6BACE,2BACET,KAAK,OACLC,YAAY,qBACZC,SAAW,SAAAC,GAAK,OAAIS,EAAoBT,EAAMC,OAAOC,UAEvD,4BAAQC,QAjBO,kBAAME,EAAYG,KAiBjC,2BCMSI,EAfyB,SAAC,GAAa,EAAZC,OAAa,IAAD,EAClBnB,mBAdC,WACnC,IAAMoB,EAAqBC,aAAaC,QAJT,aAK/B,OAAQF,GAAsBA,EAAmBG,MAAM,OAAU,GAYZC,IADD,mBAC7CC,EAD6C,KAClCC,EADkC,KASpD,OAJAC,qBAAU,YAbuB,SAACF,GAClCJ,aAAaO,QATkB,YASgBH,EAAUI,KARhC,OAqBvBC,CAA2BL,KAC1B,CAACA,IAEG,6BACL,kBAAC,EAAD,CAAkBd,YAPA,SAACoB,GAAD,OAAyBL,EAAa,GAAD,mBAAKD,GAAL,CAAgBM,QAQtEN,EAAUI,KAAK,QCALG,EAxBO,WAAO,IAAD,EACEhC,mBAASqB,aAAaC,QAHtB,WAEF,mBACnBH,EADmB,KACXpB,EADW,KAO1B,OAJA4B,qBAAU,WACRR,GAAUE,aAAaO,QANG,SAM4BT,KACrD,CAACA,IAGF,6BACE,gCACE,6CACCA,GAAU,4BACT,0BAAMc,KAAK,MAAMC,aAAW,SAA5B,gBADS,IACsCf,IAIlDA,EACG,kBAAC,EAAD,CAASA,OAAQA,IACjB,kBAAC,EAAD,CAAapB,UAAWA,MCZdoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.35536759.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\ninterface PseudoInputProps {\r\n  setPseudo: (pseudo: string) => void\r\n}\r\n\r\nconst PseudoInput: React.FC<PseudoInputProps> = ({setPseudo}) => {\r\n  const [typingPseudo, setTypingPseudo] = useState('')\r\n  const validatePseudo: () => void = () => setPseudo(typingPseudo)\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type='text'\r\n        placeholder='Enter your pseudo'\r\n        onChange={event => setTypingPseudo(event.target.value)}\r\n      />\r\n      <button onClick={validatePseudo}>OK</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PseudoInput\r\n","import React, { useState } from 'react'\r\n\r\ninterface MarketsSelectionProps {\r\n  addMarketId: (marketId: string) => void\r\n}\r\n\r\nconst MarketsSelection: React.FC<MarketsSelectionProps> = ({ addMarketId }) => {\r\n  const [newMarketName, setNewMarketName] = useState()\r\n  const [existingMarketId, setExistingMarketId] = useState()\r\n\r\n  const createMarket = () => console.log(newMarketName)\r\n  const joinMarket = () => addMarketId(existingMarketId)\r\n\r\n  return <div>\r\n    <div>\r\n      <input\r\n        type='text'\r\n        placeholder='New market name'\r\n        onChange={(event) => setNewMarketName(event.target.value)}\r\n      />\r\n      <button onClick={createMarket}>Create new market</button>\r\n    </div>\r\n    <div>\r\n      <input\r\n        type='text'\r\n        placeholder='Existing market ID'\r\n        onChange={(event => setExistingMarketId(event.target.value))}\r\n      />\r\n      <button onClick={joinMarket}>Join existing market</button>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default MarketsSelection\r\n","import React, { useEffect, useState } from 'react'\r\nimport MarketsSelection from './MarketsSelection'\r\n\r\nconst keyLocalStorageMarketIds = 'marketIds'\r\nconst marketIdsSeparator = '::'\r\n\r\nconst getMarketIdsFromLocalStorage = () => {\r\n  const marketsIdsAsString = localStorage.getItem(keyLocalStorageMarketIds)\r\n  return (marketsIdsAsString && marketsIdsAsString.split('::')) || []\r\n}\r\n\r\nconst setMarketIdsToLocalStorage = (marketIds: string[]) => {\r\n  localStorage.setItem(keyLocalStorageMarketIds, marketIds.join(marketIdsSeparator))\r\n}\r\n\r\ninterface MarketsProps {\r\n  pseudo: string\r\n}\r\n\r\nconst Markets: React.FC<MarketsProps> = ({pseudo}) => {\r\n  const [marketIds, setMarketIds] = useState<string[]>(getMarketIdsFromLocalStorage())\r\n\r\n  const addMarketId = (newMarketId: string) => setMarketIds([...marketIds, newMarketId])\r\n\r\n  useEffect(() => {\r\n    setMarketIdsToLocalStorage(marketIds)\r\n  }, [marketIds])\r\n\r\n  return <div>\r\n    <MarketsSelection addMarketId={addMarketId} />\r\n    {marketIds.join(', ')}\r\n  </div>\r\n}\r\n\r\nexport default Markets\r\n","import React, { useEffect, useState } from 'react'\nimport PseudoInput from './PseudoInput'\nimport Markets from './Markets'\n\nconst keyLocalStoragePseudo = 'pseudo'\n\nconst App: React.FC = () => {\n  const [pseudo, setPseudo] = useState(localStorage.getItem(keyLocalStoragePseudo))\n\n  useEffect(() => {\n    pseudo && localStorage.setItem(keyLocalStoragePseudo, pseudo)\n  }, [pseudo])\n\n  return (\n    <div>\n      <header>\n        <h1>Turnip Market</h1>\n        {pseudo && <h2>\n          <span role='img' aria-label='Hello'>ðŸ‘‹</span> {pseudo}\n        </h2>}\n      </header>\n\n      {pseudo\n        ? <Markets pseudo={pseudo}/>\n        : <PseudoInput setPseudo={setPseudo}/>\n      }\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}