{"version":3,"sources":["components/Block.module.css","components/PseudoInput.tsx","repositories/MarketRepository.ts","components/market/MarketsSelection.tsx","components/market/MarketWithOffers.tsx","components/market/AddOffer.tsx","components/market/Markets.tsx","components/App.tsx","serviceWorker.ts","index.tsx","components/App.module.css"],"names":["module","exports","PseudoInput","setPseudo","useState","typingPseudo","setTypingPseudo","className","blockStyles","wrapper","type","placeholder","onChange","event","target","value","element","onClick","button","createMarket","marketName","a","fetch","process","method","body","JSON","stringify","name","headers","response","json","id","activeOffers","findMarket","marketId","status","postOffer","offer","MarketsSelection","addMarketId","newMarketName","setNewMarketName","existingMarketId","setExistingMarketId","MarketRepository","market","MarketWithOffers","length","map","key","player","price","AddOffer","pseudo","marketIds","refreshMarkets","offerValue","setOfferValue","sendOffer","now","Date","beforeNoon","getHours","startTime","endTime","setHours","Promise","all","mark","parseInt","Markets","marketsIdsAsString","localStorage","getItem","split","getMarketIdsFromLocalStorage","setMarketIds","markets","setMarkets","useCallback","fetchedMarkets","filter","useEffect","setItem","join","setMarketIdsToLocalStorage","newMarketId","App","styles","appWrapper","role","aria-label","content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.40cca169.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Block_wrapper__-CBNt\",\"element\":\"Block_element__3XqcY\",\"button\":\"Block_button__GrK9h\"};","import React, { useState } from 'react'\r\nimport blockStyles from './Block.module.css'\r\n\r\ninterface PseudoInputProps {\r\n  setPseudo: (pseudo: string) => void\r\n}\r\n\r\nconst PseudoInput: React.FC<PseudoInputProps> = ({ setPseudo }: PseudoInputProps) => {\r\n  const [typingPseudo, setTypingPseudo] = useState('')\r\n  const validatePseudo: () => void = () => setPseudo(typingPseudo)\r\n\r\n  return (\r\n    <div className={blockStyles.wrapper}>\r\n      <input\r\n        type='text'\r\n        placeholder='Enter your pseudo'\r\n        onChange={event => setTypingPseudo(event.target.value)}\r\n        className={blockStyles.element}\r\n      />\r\n      <button\r\n        onClick={validatePseudo}\r\n        className={`${blockStyles.element} ${blockStyles.button}`}\r\n      >\r\n        OK\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PseudoInput\r\n","import { Market } from '../domain/Market'\r\nimport { Offer } from '../domain/Offer'\r\n\r\ntype CreateMarket = (marketName: string) => Promise<Market>\r\ntype FindMarket = (marketId: string) => Promise<Market | null>\r\ntype PostOffer = (marketId: string, offer: Offer) => Promise<void>\r\n\r\nexport const createMarket: CreateMarket = async (marketName) => {\r\n  const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/markets/`, {\r\n    method: 'POST',\r\n    body: JSON.stringify({ name: marketName }),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n\r\n  const { id, name, activeOffers } = await response.json()\r\n\r\n  return {\r\n    id,\r\n    name,\r\n    activeOffers\r\n  }\r\n}\r\n\r\nexport const findMarket: FindMarket = async (marketId) => {\r\n  const response = await fetch(`${process.env.REACT_APP_API_BASE_URL}/markets/${marketId}`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n\r\n  if (response.status === 404) {\r\n    return null\r\n  }\r\n\r\n  const { id, name, activeOffers } = await response.json()\r\n\r\n  return {\r\n    id,\r\n    name,\r\n    activeOffers\r\n  }\r\n}\r\n\r\nexport const postOffer: PostOffer = async (marketId, offer) => {\r\n  await fetch(`${process.env.REACT_APP_API_BASE_URL}/markets/${marketId}/offers`, {\r\n    method: 'POST',\r\n    body: JSON.stringify(offer),\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n}\r\n","import React, { useState } from 'react'\r\nimport * as MarketRepository from '../../repositories/MarketRepository'\r\nimport blockStyles from '../Block.module.css'\r\n\r\ninterface MarketsSelectionProps {\r\n  addMarketId: (marketId: string) => void\r\n}\r\n\r\nconst MarketsSelection: React.FC<MarketsSelectionProps> = ({ addMarketId }: MarketsSelectionProps) => {\r\n  const [newMarketName, setNewMarketName] = useState()\r\n  const [existingMarketId, setExistingMarketId] = useState()\r\n\r\n  const createMarket: () => Promise<void> = async () => {\r\n    const market = await MarketRepository.createMarket(newMarketName)\r\n    addMarketId(market.id)\r\n  }\r\n  const joinMarket: () => void = () => addMarketId(existingMarketId)\r\n\r\n  return <div>\r\n    <div className={blockStyles.wrapper}>\r\n      <input\r\n        type='text'\r\n        placeholder='New market name'\r\n        onChange={(event) => setNewMarketName(event.target.value)}\r\n        className={blockStyles.element}\r\n      />\r\n      <button\r\n        onClick={createMarket}\r\n        className={`${blockStyles.element} ${blockStyles.button}`}\r\n      >\r\n        Create new market\r\n      </button>\r\n    </div>\r\n    <div className={blockStyles.wrapper}>\r\n      <input\r\n        type='text'\r\n        placeholder='Existing market ID'\r\n        onChange={(event => setExistingMarketId(event.target.value))}\r\n        className={blockStyles.element}\r\n      />\r\n      <button\r\n        onClick={joinMarket}\r\n        className={`${blockStyles.element} ${blockStyles.button}`}\r\n      >\r\n        Join existing market\r\n      </button>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default MarketsSelection\r\n","import { Market } from '../../domain/Market'\r\nimport React from 'react'\r\n\r\ninterface MarketProps {\r\n  market: Market\r\n}\r\n\r\nconst MarketWithOffers: React.FC<MarketProps> = ({ market }: MarketProps) => {\r\n  return <div>\r\n    <h4>{market.name} ({market.id})</h4>\r\n    {market.activeOffers.length > 0 && <ul>\r\n      {market.activeOffers.map((offer) =>\r\n        <li key={offer.player}>\r\n          <div>{offer.price} bells</div>\r\n          <div>@{offer.player}</div>\r\n        </li>\r\n      )}\r\n    </ul>}\r\n    {market.activeOffers.length === 0 && <strong>no active offers!</strong>}\r\n  </div>\r\n}\r\n\r\nexport default MarketWithOffers\r\n","import React, { useState } from 'react'\r\nimport { Offer } from '../../domain/Offer'\r\nimport * as MarketRepository from '../../repositories/MarketRepository'\r\nimport blockStyles from '../Block.module.css'\r\n\r\ninterface AddOfferProps {\r\n  pseudo: string\r\n  marketIds: string[]\r\n  refreshMarkets: () => void\r\n}\r\n\r\nconst AddOffer: React.FC<AddOfferProps> = ({ pseudo, marketIds, refreshMarkets }: AddOfferProps) => {\r\n  const [offerValue, setOfferValue] = useState<number>(0)\r\n  const sendOffer: () => void = async () => {\r\n    const now = new Date()\r\n    const beforeNoon = now.getHours() < 12\r\n    const startTime = new Date()\r\n    const endTime = new Date()\r\n\r\n    if (beforeNoon) {\r\n      startTime.setHours(8, 0, 0, 0)\r\n      endTime.setHours(12, 0, 0, 0)\r\n    } else {\r\n      startTime.setHours(12, 0, 0, 0)\r\n      endTime.setHours(22, 0, 0, 0)\r\n    }\r\n\r\n    const offer: Offer = {\r\n      player: pseudo,\r\n      price: offerValue,\r\n      startTime,\r\n      endTime\r\n    }\r\n\r\n    await Promise.all(marketIds.map(async (marketId) => {\r\n      await MarketRepository.postOffer(marketId, offer)\r\n    }))\r\n    refreshMarkets()\r\n  }\r\n\r\n  return <div className={blockStyles.wrapper}>\r\n    <input\r\n      type='number'\r\n      placeholder='$$$$'\r\n      onChange={(event): void => setOfferValue(parseInt(event.target.value))}\r\n      className={blockStyles.element}\r\n    />\r\n    <button\r\n      onClick={sendOffer}\r\n      className={`${blockStyles.element} ${blockStyles.button}`}\r\n    >\r\n      Send Offer\r\n    </button>\r\n  </div>\r\n}\r\n\r\nexport default AddOffer\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport MarketsSelection from './MarketsSelection'\r\nimport { Market } from '../../domain/Market'\r\nimport * as MarketRepository from '../../repositories/MarketRepository'\r\nimport MarketWithOffers from './MarketWithOffers'\r\nimport AddOffer from './AddOffer'\r\nimport blockStyles from '../Block.module.css'\r\n\r\nconst keyLocalStorageMarketIds = 'marketIds'\r\nconst marketIdsSeparator = '::'\r\n\r\nconst getMarketIdsFromLocalStorage = (): string[] => {\r\n  const marketsIdsAsString = localStorage.getItem(keyLocalStorageMarketIds)\r\n  return (marketsIdsAsString && marketsIdsAsString.split('::')) || []\r\n}\r\n\r\nconst setMarketIdsToLocalStorage = (marketIds: string[]): void => {\r\n  localStorage.setItem(keyLocalStorageMarketIds, marketIds.join(marketIdsSeparator))\r\n}\r\n\r\ninterface MarketsProps {\r\n  pseudo: string\r\n}\r\n\r\nconst Markets: React.FC<MarketsProps> = ({ pseudo }: MarketsProps) => {\r\n  const [marketIds, setMarketIds] = useState<string[]>(getMarketIdsFromLocalStorage())\r\n  const [markets, setMarkets] = useState<Market[]>([])\r\n\r\n  const refreshMarkets = useCallback(async () => {\r\n    const fetchedMarkets = await Promise.all(\r\n      marketIds.map(async (marketId) => MarketRepository.findMarket(marketId))\r\n    )\r\n    setMarkets(fetchedMarkets.filter((market): market is Market => market !== null))\r\n  }, [marketIds])\r\n\r\n  useEffect(() => {\r\n    (async (): Promise<void> => {\r\n      await refreshMarkets()\r\n    })()\r\n  }, [marketIds, refreshMarkets])\r\n\r\n  const addMarketId = (newMarketId: string): void => setMarketIds([...marketIds, newMarketId])\r\n\r\n  useEffect(() => {\r\n    setMarketIdsToLocalStorage(marketIds)\r\n  }, [marketIds])\r\n\r\n  return <div>\r\n    <AddOffer pseudo={pseudo} marketIds={marketIds} refreshMarkets={refreshMarkets}/>\r\n    {markets.length > 0 && <div className={blockStyles.wrapper}>\r\n      <h3>Current Offers</h3>\r\n      {markets.map((market) => <div key={market.id} className={blockStyles.element}><MarketWithOffers market={market}/></div>)}\r\n    </div>}\r\n    <MarketsSelection addMarketId={addMarketId}/>\r\n  </div>\r\n}\r\n\r\nexport default Markets\r\n","import React, { useEffect, useState } from 'react'\nimport PseudoInput from './PseudoInput'\nimport Markets from './market/Markets'\nimport styles from './App.module.css'\n\nconst keyLocalStoragePseudo = 'pseudo'\n\nconst App: React.FC = () => {\n  const [pseudo, setPseudo] = useState(localStorage.getItem(keyLocalStoragePseudo))\n\n  useEffect(() => {\n    pseudo && localStorage.setItem(keyLocalStoragePseudo, pseudo)\n  }, [pseudo])\n\n  return (\n    <div className={styles.appWrapper}>\n      <header>\n        <h1>Turnip Market</h1>\n        {pseudo && <h2>\n          <span role='img' aria-label='Hello'>👋</span> {pseudo}\n        </h2>}\n      </header>\n\n      <div className={styles.content}>\n        {pseudo\n          ? <Markets pseudo={pseudo}/>\n          : <PseudoInput setPseudo={setPseudo}/>\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n};\n\nexport function register (config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__-xe7_\",\"content\":\"App_content__1dlDM\"};"],"sourceRoot":""}